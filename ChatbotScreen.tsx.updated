import { useState, useRef, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Textarea } from "@/components/ui/textarea";
import { Send, UserRound, Bot, Volume2, VolumeX, WifiOff, RotateCcw, Bug } from "lucide-react";
import { cn } from "@/lib/utils";
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { useToast } from "@/components/ui/use-toast";
import { soundEffects } from "@/utils/soundEffects";
import { sendMessage, checkApiHealth } from '@/services/chatApi';
import { useNavigate } from 'react-router-dom';

type Message = {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: Date;
  debug_info?: string; // Add debug_info field
};

const ChatbotScreen = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: 'Hello! I\'m MedAssist AI. How can I help you today?',
      role: 'assistant',
      timestamp: new Date(),
    },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [hasInteracted, setHasInteracted] = useState(false);
  const [isApiConnected, setIsApiConnected] = useState(true);
  const [showDebugInfo, setShowDebugInfo] = useState(false); // Add state for toggling debug info
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();
  const navigate = useNavigate();
  
  // Show initial toast about sound and interaction
  useEffect(() => {
    toast({
      title: "Sound notifications available",
      description: "Click anywhere on the page to enable sound notifications",
      duration: 4000,
    });
  }, [toast]);

  // Check API health on component mount
  useEffect(() => {
    const checkHealth = async () => {
      const isConnected = await checkApiHealth();
      setIsApiConnected(isConnected);
      
      if (!isConnected) {
        toast({
          title: "Backend connection issue",
          description: "Can't connect to the MedAssist backend. Responses will be simulated.",
          variant: "destructive",
          duration: 5000,
        });
      }
    };
    
    checkHealth();
  }, [toast]);

  // Track user interaction to enable sound
  useEffect(() => {
    const handleInteraction = () => {
      if (!hasInteracted) {
        setHasInteracted(true);
        toast({
          title: "Sound notifications enabled",
          description: "You can now hear notification sounds when messages are sent or received",
          duration: 3000,
        });
      }
    };

    document.addEventListener('click', handleInteraction);
    document.addEventListener('keydown', handleInteraction);

    return () => {
      document.removeEventListener('click', handleInteraction);
      document.removeEventListener('keydown', handleInteraction);
    };
  }, [hasInteracted, toast]);

  // Play sounds when new messages arrive
  useEffect(() => {
    if (messages.length > 0) {
      const lastMessage = messages[messages.length - 1];
      if (lastMessage.role === 'assistant') {
        soundEffects.playMessageReceived();
      }
    }
  }, [messages]);

  // Auto-scroll to latest message with improved behavior
  useEffect(() => {
    if (messagesEndRef.current && !document.activeElement?.matches('textarea')) {
      // Only auto-scroll if user isn't currently typing
      requestAnimationFrame(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
      });
    }
  }, [messages, isLoading]);

  // Handle scroll position when textarea resizes, but prevent scroll jumps during typing
  useEffect(() => {
    const handleResize = () => {
      if (chatContainerRef.current && !document.activeElement?.matches('textarea')) {
        const isAtBottom = 
          chatContainerRef.current.scrollHeight - chatContainerRef.current.scrollTop <= 
          chatContainerRef.current.clientHeight + 100;
          
        if (isAtBottom) {
          requestAnimationFrame(() => {
            messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
          });
        }
      }
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const handleSendMessage = async () => {
    if (!input.trim()) return;
    
    // Play sound for sent message
    soundEffects.playMessageSent();
    
    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      role: 'user',
      timestamp: new Date(),
    };
    
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    
    try {
      // Try to get a response from the API if connected
      if (isApiConnected) {
        const { response, debug_info } = await sendMessage(input);
        
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          content: response,
          role: 'assistant',
          timestamp: new Date(),
          debug_info: debug_info, // Store debug info with the message
        };
        
        setMessages((prev) => [...prev, assistantMessage]);
      } else {
        // Fallback to simulated responses if API is not available
        setTimeout(() => {
          const assistantMessage: Message = {
            id: (Date.now() + 1).toString(),
            content: getSimulatedResponse(input),
            role: 'assistant',
            timestamp: new Date(),
          };
          
          setMessages((prev) => [...prev, assistantMessage]);
        }, 1000);
      }
    } catch (error) {
      console.error('Error getting response:', error);
      toast({
        title: "Communication Error",
        description: "Failed to get a response from the AI. Please try again.",
        variant: "destructive",
      });
      
      // If API request fails, create a fallback message
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: "I'm sorry, I'm having trouble connecting to my knowledge base. Please try again in a moment.",
        role: 'assistant',
        timestamp: new Date(),
      };
      
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const getSimulatedResponse = (userInput: string) => {
    const userInputLower = userInput.toLowerCase();
    
    if (userInputLower.includes('appointment') || userInputLower.includes('schedule')) {
      return 'You can schedule an appointment through our appointment section on the homepage. Would you like me to help you with that?';
    } else if (userInputLower.includes('symptom') || userInputLower.includes('pain') || userInputLower.includes('sick')) {
      return 'I understand you\'re not feeling well. While I can provide general information, it\'s important to consult with a healthcare professional for proper diagnosis. Can you tell me more about your symptoms?';
    } else if (userInputLower.includes('thank')) {
      return 'You\'re welcome! Is there anything else I can help you with today?';
    } else {
      return 'Thank you for your message. How else can I assist you with your healthcare needs today?';
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const toggleSound = () => {
    const muted = soundEffects.toggleMute();
    setIsMuted(muted);
    
    toast({
      title: muted ? "Sound notifications muted" : "Sound notifications enabled",
      duration: 2000,
    });
  };
  
  const handleReset = () => {
    // Navigate back to the main page
    navigate('/');
  };

  // Toggle debug information display
  const toggleDebugInfo = () => {
    setShowDebugInfo(!showDebugInfo);
    toast({
      title: showDebugInfo ? "Debug info hidden" : "Debug info visible",
      duration: 2000,
    });
  };

  return (
    <div className="flex flex-col min-h-screen bg-background">
      <Header />
      <main className="flex-1 container max-w-4xl mx-auto py-8 px-4 mt-16">
        <div className="flex flex-col h-[calc(100vh-200px)] bg-card rounded-lg shadow-md overflow-hidden">
          <div className="p-4 border-b bg-primary/5 flex justify-between items-center">
            <div>
              <h2 className="text-xl font-semibold text-primary">MedAssist AI</h2>
              <p className="text-sm text-muted-foreground">Ask me anything about your health or medical concerns</p>
            </div>
            <div className="flex items-center gap-2">
              {!isApiConnected && (
                <span className="flex items-center text-xs text-yellow-500 gap-1">
                  <WifiOff size={14} className="animate-pulse" />
                  Offline Mode
                </span>
              )}
              <Button 
                variant="ghost" 
                size="icon" 
                onClick={toggleSound}
                title={isMuted ? "Unmute" : "Mute"}
                className="relative"
              >
                {isMuted ? <VolumeX size={20} /> : <Volume2 size={20} />}
                {!hasInteracted && (
                  <span className="absolute -top-1 -right-1 w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></span>
                )}
              </Button>
              {/* Add debug toggle button */}
              <Button 
                variant="ghost" 
                size="icon" 
                onClick={toggleDebugInfo}
                title={showDebugInfo ? "Hide Debug Info" : "Show Debug Info"}
                className={cn(
                  "relative",
                  showDebugInfo && "bg-green-100 text-green-800"
                )}
              >
                <Bug size={20} />
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={handleReset}
                title="Return to home page"
                className="flex items-center gap-1"
              >
                <RotateCcw size={16} />
                Reset
              </Button>
            </div>
          </div>
          
          <div 
            ref={chatContainerRef}
            className="flex-1 overflow-y-auto p-4 space-y-4 scroll-smooth"
          >
            {messages.map((message) => (
              <div key={message.id} className="space-y-2">
                <div 
                  className={cn(
                    "flex items-start gap-3 max-w-[80%] animate-fade-in",
                    message.role === 'user' ? "ml-auto" : ""
                  )}
                >
                  {message.role === 'assistant' && (
                    <Avatar className="h-8 w-8 bg-blue-500">
                      <AvatarFallback className="bg-blue-500 text-white">
                        <Bot size={16} />
                      </AvatarFallback>
                    </Avatar>
                  )}
                  
                  <div className={cn(
                    "rounded-2xl px-4 py-2 text-sm shadow-sm transition-all relative",
                    message.role === 'assistant' 
                      ? "bg-muted text-foreground rounded-tl-sm" 
                      : "bg-primary text-primary-foreground rounded-tr-sm"
                  )}>
                    {message.content}
                    <span className="block mt-1 text-[10px] opacity-70">
                      {formatTime(message.timestamp)}
                    </span>
                  </div>
                  
                  {message.role === 'user' && (
                    <Avatar className="h-8 w-8 bg-secondary/90 shadow-sm">
                      <AvatarFallback className="text-secondary-foreground">
                        <UserRound size={16} />
                      </AvatarFallback>
                    </Avatar>
                  )}
                </div>
                
                {/* Debug information section */}
                {showDebugInfo && message.debug_info && (
                  <div className="ml-11 mr-11 mt-1 p-3 bg-gray-100 dark:bg-gray-800 rounded-md border border-gray-300 dark:border-gray-700 text-xs font-mono overflow-x-auto">
                    <div className="flex justify-between items-center mb-1">
                      <span className="font-semibold text-green-600 dark:text-green-400">Debug Information</span>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="h-6 px-2 text-xs"
                        onClick={() => navigator.clipboard.writeText(message.debug_info || '')}
                      >
                        Copy
                      </Button>
                    </div>
                    <pre className="whitespace-pre-wrap break-words">{message.debug_info}</pre>
                  </div>
                )}
              </div>
            ))}
            
            {isLoading && (
              <div className="flex items-start gap-3 max-w-[80%] animate-fade-in">
                <Avatar className="h-8 w-8 bg-blue-500">
                  <AvatarFallback className="bg-blue-500 text-white">
                    <Bot size={16} />
                  </AvatarFallback>
                </Avatar>
                <div className="bg-muted rounded-2xl rounded-tl-sm px-4 py-3 text-sm shadow-sm">
                  <div className="flex space-x-2">
                    <div className="h-2 w-2 bg-primary/40 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                    <div className="h-2 w-2 bg-primary/40 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                    <div className="h-2 w-2 bg-primary/40 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} className="h-0.5" />
          </div>
          
          <div className="p-4 border-t bg-background/80 backdrop-blur-sm sticky bottom-0 z-10">
            <div className="flex gap-2 items-end">
              <Textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder="Type your message here..."
                className="min-h-[50px] max-h-[150px] resize-none rounded-xl border-muted-foreground/20 focus-visible:ring-primary/50 shadow-sm"
              />
              <Button 
                onClick={handleSendMessage} 
                size="icon" 
                disabled={!input.trim() || isLoading}
                className="rounded-full h-10 w-10 shadow-sm transition-all hover:shadow-md hover:scale-105"
              >
                <Send size={18} className="text-primary-foreground" />
              </Button>
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default ChatbotScreen;
